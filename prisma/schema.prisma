// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int               @id @default(autoincrement())
  email         String            @unique
  username      String            @unique
  password      String
  name          String
  createdAt     DateTime          @default(now())
  lastLoginAt   DateTime?
  isActive      Boolean           @default(true)
  role          UserRole          @default(STUDENT)
  refreshTokens RefreshToken[]
  student       Student?          @relation("StudentUser")
  approvedStudents Student[]        @relation("ApprovalUpdatedByUser")
  threads       Thread[]
  threadComments ThreadComment[]
  threadVotes   ThreadVote[]
  commentVotes  CommentVote[]
  bookmarks     BookmarkedThread[]
  categories      Category[]        @relation("CategoryAuthor")
}

model RefreshToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked    Boolean   @default(false)
  revokedAt  DateTime?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  deviceInfo String?
  ipAddress  String?
}

model Student {
  id             Int            @id @default(autoincrement())
  userId         Int            @unique
  academicNumber String         @unique
  department     Department
  studyLevel     Int
  approvalStatus ApprovalStatus @default(PENDING)
  user           User           @relation("StudentUser", fields: [userId], references: [id])
  approvalUpdatedByUserId Int?
  approvalUpdatedByUser   User?      @relation("ApprovalUpdatedByUser", fields: [approvalUpdatedByUserId], references: [id], onDelete: SetNull)
}

enum UserRole {
  ADMIN
  STUDENT
  SUPER_ADMIN
}

enum Department {
  IT
  SE
  COM
  IMSE
  CND
  MRE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}
model Category {
  category_id     Int      @id @default(autoincrement())
  name            String   @unique
  threads         Thread[]

  author_user_id  Int?
  author          User?    @relation("CategoryAuthor",fields: [author_user_id], references: [id], onDelete: SetNull)
}

model Thread {
  thread_id      Int               @id @default(autoincrement())
  category_id    Int
  category       Category          @relation(fields: [category_id], references: [category_id])
  author_user_id Int
  author         User              @relation(fields: [author_user_id], references: [id])
  title          String
  content        String
  created_at     DateTime          @default(now())
  comments       ThreadComment[]
  votes          ThreadVote[]
  bookmarks      BookmarkedThread[]
}

model ThreadComment {
  comment_id     Int            @id @default(autoincrement())
  thread_id      Int
  thread         Thread         @relation(fields: [thread_id], references: [thread_id], onDelete: Cascade)
  author_user_id Int
  author         User           @relation(fields: [author_user_id], references: [id])
  content        String
  created_at     DateTime       @default(now())
  votes          CommentVote[]
}

model ThreadVote {
  thread_id     Int
  thread        Thread @relation(fields: [thread_id], references: [thread_id], onDelete: Cascade)
  voter_user_id Int
  user          User   @relation(fields: [voter_user_id], references: [id])
  vote_type     VoteType
  
  @@id([thread_id, voter_user_id])
}

model CommentVote {
  comment_id    Int
  comment       ThreadComment @relation(fields: [comment_id], references: [comment_id], onDelete: Cascade)
  voter_user_id Int
  user          User          @relation(fields: [voter_user_id], references: [id])
  vote_type     VoteType
  
  @@id([comment_id, voter_user_id])
}

model BookmarkedThread {
  user_id   Int
  user      User   @relation(fields: [user_id], references: [id])
  thread_id Int
  thread    Thread @relation(fields: [thread_id], references: [thread_id], onDelete: Cascade)
  
  @@id([user_id, thread_id])
}

enum VoteType {
  UP
  DOWN
}